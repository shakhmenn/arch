const fs = require('fs');
const path = require('path');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const makeRequest = (options, data = null) => {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const result = {
            status: res.statusCode,
            headers: res.headers,
            body: body ? JSON.parse(body) : null
          };
          resolve(result);
        } catch (e) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            body: body
          });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(data);
    }
    
    req.end();
  });
};

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
const createTestFile = () => {
  const testContent = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á–∏.';
  const testFilePath = path.join(__dirname, 'test-attachment.txt');
  fs.writeFileSync(testFilePath, testContent);
  return testFilePath;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è multipart/form-data
const createMultipartData = (filePath) => {
  const boundary = '----formdata-boundary-' + Math.random().toString(36);
  const fileName = path.basename(filePath);
  const fileContent = fs.readFileSync(filePath);
  
  let data = '';
  data += `--${boundary}\r\n`;
  data += `Content-Disposition: form-data; name="file"; filename="${fileName}"\r\n`;
  data += `Content-Type: text/plain\r\n\r\n`;
  
  const header = Buffer.from(data, 'utf8');
  const footer = Buffer.from(`\r\n--${boundary}--\r\n`, 'utf8');
  
  return {
    boundary,
    data: Buffer.concat([header, fileContent, footer])
  };
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const runTests = async () => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthCheck = await makeRequest({
       hostname: 'localhost',
       port: 3000,
       path: '/tasks',
       method: 'GET',
       headers: {
         'Content-Type': 'application/json'
       }
     });
    
    if (healthCheck.status === 401) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${healthCheck.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoints
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö endpoints...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401 –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
    const uploadCheck = await makeRequest({
       hostname: 'localhost',
       port: 3000,
       path: '/tasks/1/attachments',
       method: 'POST',
       headers: {
         'Content-Type': 'multipart/form-data'
       }
     });
    
    if (uploadCheck.status === 401) {
      console.log('‚úÖ Endpoint /tasks/:id/attachments –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è upload endpoint: ${uploadCheck.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
    const detailsCheck = await makeRequest({
       hostname: 'localhost',
       port: 3000,
       path: '/tasks/1/details',
       method: 'GET',
       headers: {
         'Content-Type': 'application/json'
       }
     });
    
    if (detailsCheck.status === 401) {
      console.log('‚úÖ Endpoint /tasks/:id/details –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è details endpoint: ${detailsCheck.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityCheck = await makeRequest({
       hostname: 'localhost',
       port: 3000,
       path: '/tasks/1/activity',
       method: 'GET',
       headers: {
         'Content-Type': 'application/json'
       }
     });
    
    if (activityCheck.status === 401) {
      console.log('‚úÖ Endpoint /tasks/:id/activity –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è activity endpoint: ${activityCheck.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–¥–∞—á—É —Ñ–∞–π–ª–æ–≤
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–¥–∞—á—É —Ñ–∞–π–ª–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ uploads
    const uploadsDir = path.join(__dirname, 'uploads', 'tasks');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    const testStaticFile = path.join(uploadsDir, 'test-static.txt');
    fs.writeFileSync(testStaticFile, 'Test static file content');
    
    const staticCheck = await makeRequest({
       hostname: 'localhost',
       port: 3000,
       path: '/uploads/tasks/test-static.txt',
       method: 'GET'
     });
    
    if (staticCheck.status === 200) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–µ–π: ${staticCheck.status}`);
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(testStaticFile);
    
    console.log('\nüéâ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('‚úÖ –ù–æ–≤—ã–µ endpoints —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è multer —Å–æ–∑–¥–∞–Ω–∞');
    console.log('‚úÖ –ü–∞–ø–∫–∞ uploads —Å–æ–∑–¥–∞–Ω–∞');
    
    console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:');
    console.log('1. –ü–æ–ª—É—á–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /auth/login');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ POST /tasks');
    console.log('3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ POST /tasks/:id/attachments');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ GET /tasks/:id/details');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runTests();
}

module.exports = { runTests };