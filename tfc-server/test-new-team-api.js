const http = require('http');

// –ë–∞–∑–æ–≤—ã–π URL API
const API_HOST = 'localhost';
const API_PORT = 3000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: API_HOST,
      port: API_PORT,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({ status: res.statusCode, data: jsonBody, headers: res.headers });
        } catch (e) {
          resolve({ status: res.statusCode, data: body, headers: res.headers });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function testServerHealth() {
  try {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await makeRequest('GET', '/teams');
    
    if (response.status === 401) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
      return true;
    } else if (response.status < 500) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      return true;
    } else {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testEndpointsStructure() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
  
  const endpoints = [
    { method: 'GET', path: '/teams', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥' },
    { method: 'POST', path: '/teams', description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã' },
    { method: 'GET', path: '/teams/1', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–∞–Ω–¥—ã' },
    { method: 'POST', path: '/teams/1/members', description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
    { method: 'DELETE', path: '/teams/1/members/1', description: '–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
    { method: 'POST', path: '/teams/transfer', description: '–ü–µ—Ä–µ–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
    { method: 'GET', path: '/teams/1/history', description: '–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã' },
    { method: 'GET', path: '/teams/user/1/active-team', description: '–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
  ];

  for (const endpoint of endpoints) {
    try {
      const response = await makeRequest(endpoint.method, endpoint.path);
      
      if (response.status === 401) {
        console.log(`‚úÖ ${endpoint.description}: —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)`);
      } else if (response.status === 404) {
        console.log(`‚ö†Ô∏è ${endpoint.description}: —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      } else if (response.status < 500) {
        console.log(`‚úÖ ${endpoint.description}: —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      } else {
        console.log(`‚ùå ${endpoint.description}: —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (${response.status})`);
      }
    } catch (error) {
      console.log(`‚ùå ${endpoint.description}: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
}

async function testDatabaseConstraint() {
  console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω–¥–µ–∫—Å—ã
    const indexes = await prisma.$queryRaw`
      SELECT indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename = 'user_teams' AND indexname = 'one_active_team_per_user';
    `;
    
    if (indexes.length > 0) {
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å "one_active_team_per_user" —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚ùå –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å "one_active_team_per_user" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await prisma.$disconnect();
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  const serverHealthy = await testServerHealth();
  
  if (!serverHealthy) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤.');
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  await testEndpointsStructure();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await testDatabaseConstraint();
  
  console.log('\nüìã –†–µ–∑—é–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:');
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å UserTeam —Å –ø–æ–ª—è–º–∏ isActive, joinedAt, leftAt');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è "–æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ - –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"');
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω TeamsService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ DTO –¥–ª—è API');
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω TeamsController —Å –Ω–æ–≤—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω TasksService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é');
  
  console.log('\nüéâ –≠—Ç–∞–ø 1 (Backend –∏–∑–º–µ–Ω–µ–Ω–∏—è) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   - –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  console.log('   - –≠—Ç–∞–ø 3: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
  console.log('   - –≠—Ç–∞–ø 4: –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);