import {
  PrismaClient,
  MetricCategory,
  MetricUnit,
  MetricDirection,
  Role,
  MetricPeriodType,
  TaskType,
  TaskStatus,
  TaskPriority,
} from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding metric definitions...');

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫
  const metricDefinitions = [
    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    {
      name: '–í—ã—Ä—É—á–∫–∞',
      description: '–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥',
      category: MetricCategory.FINANCIAL,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å',
      description: '–ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
      category: MetricCategory.FINANCIAL,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å',
      description: '–ü—Ä–∏–±—ã–ª—å –¥–æ –≤—ã—á–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
      category: MetricCategory.FINANCIAL,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫',
      description: '–î–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥',
      category: MetricCategory.FINANCIAL,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂',
      description: '–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ –≤—ã—Ä—É—á–∫–µ',
      category: MetricCategory.FINANCIAL,
      unit: MetricUnit.PERCENTAGE,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: 'EBITDA',
      description: '–ü—Ä–∏–±—ã–ª—å –¥–æ –≤—ã—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –Ω–∞–ª–æ–≥–æ–≤, –∏–∑–Ω–æ—Å–∞ –∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏',
      category: MetricCategory.FINANCIAL,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },

    // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    {
      name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: '–û–±—â–µ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      category: MetricCategory.OPERATIONAL,
      unit: MetricUnit.COUNT,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥',
      category: MetricCategory.OPERATIONAL,
      unit: MetricUnit.COUNT,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—à–µ–¥—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥',
      category: MetricCategory.OPERATIONAL,
      unit: MetricUnit.COUNT,
      direction: MetricDirection.LOWER_IS_BETTER,
    },
    {
      name: '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
      description: '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
      category: MetricCategory.OPERATIONAL,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π, —Å—Ç–∞–≤—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      category: MetricCategory.OPERATIONAL,
      unit: MetricUnit.PERCENTAGE,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      description: '–û–±—â–µ–µ —á–∏—Å–ª–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤',
      category: MetricCategory.OPERATIONAL,
      unit: MetricUnit.COUNT,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },

    // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    {
      name: 'LTV (Lifetime Value)',
      description: '–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
      category: MetricCategory.CUSTOMER,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: 'CAC (Customer Acquisition Cost)',
      description: '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
      category: MetricCategory.CUSTOMER,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.LOWER_IS_BETTER,
    },
    {
      name: 'Churn Rate',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      category: MetricCategory.CUSTOMER,
      unit: MetricUnit.PERCENTAGE,
      direction: MetricDirection.LOWER_IS_BETTER,
    },
    {
      name: 'NPS (Net Promoter Score)',
      description: '–ò–Ω–¥–µ–∫—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      category: MetricCategory.CUSTOMER,
      unit: MetricUnit.RATIO,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },

    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    {
      name: '–í—ã—Ä—É—á–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
      description: '–î–æ—Ö–æ–¥, –ø—Ä–∏—Ö–æ–¥—è—â–∏–π—Å—è –Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞',
      category: MetricCategory.PRODUCTIVITY,
      unit: MetricUnit.CURRENCY,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞',
      description: '–û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏',
      category: MetricCategory.PRODUCTIVITY,
      unit: MetricUnit.RATIO,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    {
      name: '–î–æ–ª—è —Ä—ã–Ω–∫–∞',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ —Ä—ã–Ω–∫–∞',
      category: MetricCategory.STRATEGIC,
      unit: MetricUnit.PERCENTAGE,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: '–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏',
      description: '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º',
      category: MetricCategory.STRATEGIC,
      unit: MetricUnit.PERCENTAGE,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
    {
      name: 'ROI (Return on Investment)',
      description: '–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
      category: MetricCategory.STRATEGIC,
      unit: MetricUnit.PERCENTAGE,
      direction: MetricDirection.HIGHER_IS_BETTER,
    },
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
  const existingCount = await prisma.metricDefinition.count();

  if (existingCount === 0) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫
    await prisma.metricDefinition.createMany({
      data: metricDefinitions,
    });
    console.log(`‚úÖ Created ${metricDefinitions.length} metric definitions`);
  } else {
    console.log(`‚ÑπÔ∏è Metric definitions already exist (${existingCount} found)`);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üå± Creating additional test users...');

  const testUsers = [
    {
      phone: '+79161111111',
      password: '$2b$10$08Rn0fDITvJq.1DKQpx12.g1mNPBUOFVNH2AQ4l1xVdkD3z0SsR9y', // password: 'test123'
      name: '–ú–∞—Ä–∏—è',
      surname: '–ò–≤–∞–Ω–æ–≤–∞',
      patronymic: '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
      birthDate: new Date('1990-07-22'),
      personalTelegram: '@maria_ivanova',
      personalInstagram: '@maria.business',
      personalPhone: '+79161111111',
      yearsInBusiness: 5,
      hobbies: '–ô–æ–≥–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –∫—É–ª–∏–Ω–∞—Ä–∏—è',
      role: Role.USER,
      profile: {
        userName: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        userAge: 34,
        businessName: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –ó–¥–æ—Ä–æ–≤—å–µ',
        businessDescription:
          '–°–µ—Ç—å —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã –∏ SPA-—Ü–µ–Ω—Ç—Ä–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é –∏ –∑–¥–æ—Ä–æ–≤—å–µ–º.',
        currentRevenue: '1800000',
        targetRevenue: '2500000',
        currentEmployees: 8,
        targetEmployees: 12,
        bio: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å–µ—Ç–∏ —Å–∞–ª–æ–Ω–æ–≤ "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –ó–¥–æ—Ä–æ–≤—å–µ".',
        workPhone: '+74951111111',
        website: 'https://beauty-health.ru',
        workInstagram: '@beauty_health_official',
        workTelegram: '@beauty_health_channel',
        workSchedule: '–ü–Ω-–í—Å: 9:00-21:00',
        addresses: '–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 25; –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 12',
      },
      businessContext: {
        industry: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
        businessStage: 'growth',
        foundedYear: 2019,
        location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
        mainProducts:
          '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è, –º–∞—Å—Å–∞–∂, SPA-–ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
        targetAudience: '–ñ–µ–Ω—â–∏–Ω—ã 25-45 –ª–µ—Ç, —Å—Ä–µ–¥–Ω–∏–π –∏ –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥',
        businessModel: 'B2C —É—Å–ª—É–≥–∏',
        marketSize: '5000000000',
        competitorCount: 200,
        dataRelevanceDate: new Date('2024-08-01'),
      },
    },
    {
      phone: '+79162222222',
      password: '$2b$10$08Rn0fDITvJq.1DKQpx12.g1mNPBUOFVNH2AQ4l1xVdkD3z0SsR9y',
      name: '–î–º–∏—Ç—Ä–∏–π',
      surname: '–ö–æ–∑–ª–æ–≤',
      patronymic: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
      birthDate: new Date('1982-11-10'),
      personalTelegram: '@dmitry_kozlov',
      personalInstagram: '@dmitry.food',
      personalPhone: '+79162222222',
      yearsInBusiness: 12,
      hobbies: '–ö—É–ª–∏–Ω–∞—Ä–∏—è, —Ä—ã–±–∞–ª–∫–∞, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
      role: Role.USER,
      profile: {
        userName: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        userAge: 42,
        businessName: '–í–∫—É—Å–Ω–∞—è –ï–¥–∞',
        businessDescription:
          '–°–µ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤–æ–π –∏ –≤–∫—É—Å–Ω–æ–π –ø–∏—â–µ.',
        currentRevenue: '3200000',
        targetRevenue: '4500000',
        currentEmployees: 25,
        targetEmployees: 35,
        bio: '–†–µ—Å—Ç–æ—Ä–∞—Ç–æ—Ä —Å 12-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å–µ—Ç–∏ "–í–∫—É—Å–Ω–∞—è –ï–¥–∞".',
        workPhone: '+74952222222',
        website: 'https://vkusnaya-eda.ru',
        workInstagram: '@vkusnaya_eda_official',
        workTelegram: '@vkusnaya_eda_delivery',
        workSchedule: '–ü–Ω-–í—Å: 8:00-23:00',
        addresses:
          '–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 45; –ú–æ—Å–∫–≤–∞, –ø—Ä. –ú–∏—Ä–∞, –¥. 78; –ú–æ—Å–∫–≤–∞, —É–ª. –°–∞–¥–æ–≤–∞—è, –¥. 33',
      },
      businessContext: {
        industry: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
        businessStage: 'maturity',
        foundedYear: 2012,
        location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
        mainProducts: '–ë—ã—Å—Ç—Ä–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã, –∫–µ–π—Ç–µ—Ä–∏–Ω–≥',
        targetAudience: '–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã, —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
        businessModel: 'B2C —É—Å–ª—É–≥–∏ + –¥–æ—Å—Ç–∞–≤–∫–∞',
        marketSize: '8000000000',
        competitorCount: 300,
        dataRelevanceDate: new Date('2024-08-01'),
      },
    },
    {
      phone: '+79163333333',
      password: '$2b$10$08Rn0fDITvJq.1DKQpx12.g1mNPBUOFVNH2AQ4l1xVdkD3z0SsR9y',
      name: '–ï–ª–µ–Ω–∞',
      surname: '–°–º–∏—Ä–Ω–æ–≤–∞',
      patronymic: '–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
      birthDate: new Date('1988-04-18'),
      personalTelegram: '@elena_smirnova',
      personalInstagram: '@elena.education',
      personalPhone: '+79163333333',
      yearsInBusiness: 6,
      hobbies: '–ß—Ç–µ–Ω–∏–µ, —Ç–∞–Ω—Ü—ã, –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤',
      role: Role.USER,
      profile: {
        userName: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        userAge: 36,
        businessName: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¶–µ–Ω—Ç—Ä "–ó–Ω–∞–Ω–∏–µ"',
        businessDescription:
          '–ß–∞—Å—Ç–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö. –ö—É—Ä—Å—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
        currentRevenue: '1200000',
        targetRevenue: '1800000',
        currentEmployees: 15,
        targetEmployees: 20,
        bio: '–ü–µ–¥–∞–≥–æ–≥ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –≤ —Å—Ñ–µ—Ä–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ "–ó–Ω–∞–Ω–∏–µ".',
        workPhone: '+74953333333',
        website: 'https://znanie-center.ru',
        workInstagram: '@znanie_center',
        workTelegram: '@znanie_education',
        workSchedule: '–ü–Ω-–°–±: 9:00-20:00, –í—Å: 10:00-18:00',
        addresses: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 15; –ú–æ—Å–∫–≤–∞, —É–ª. –ì–æ–≥–æ–ª—è, –¥. 28',
      },
      businessContext: {
        industry: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        businessStage: 'growth',
        foundedYear: 2018,
        location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
        mainProducts:
          '–ö—É—Ä—Å—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠/–û–ì–≠, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –¥–µ—Ç–µ–π',
        targetAudience: '–î–µ—Ç–∏ 5-17 –ª–µ—Ç, –≤–∑—Ä–æ—Å–ª—ã–µ 18-50 –ª–µ—Ç',
        businessModel: 'B2C –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
        marketSize: '3000000000',
        competitorCount: 150,
        dataRelevanceDate: new Date('2024-08-01'),
      },
    },
    {
      phone: '+79164444444',
      password: '$2b$10$08Rn0fDITvJq.1DKQpx12.g1mNPBUOFVNH2AQ4l1xVdkD3z0SsR9y',
      name: '–ê–Ω–¥—Ä–µ–π',
      surname: '–í–æ–ª–∫–æ–≤',
      patronymic: '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
      birthDate: new Date('1975-09-05'),
      personalTelegram: '@andrey_volkov',
      personalInstagram: '@andrey.construction',
      personalPhone: '+79164444444',
      yearsInBusiness: 15,
      hobbies: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ—Ö–æ—Ç–∞, –±–∞–Ω—è',
      role: Role.TEAM_LEADER,
      profile: {
        userName: '–ê–Ω–¥—Ä–µ–π –í–æ–ª–∫–æ–≤',
        userAge: 49,
        businessName: '–°—Ç—Ä–æ–π–ú–∞—Å—Ç–µ—Ä',
        businessDescription:
          '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞. –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤, —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ.',
        currentRevenue: '5500000',
        targetRevenue: '7000000',
        currentEmployees: 45,
        targetEmployees: 60,
        bio: '–û–ø—ã—Ç–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ "–°—Ç—Ä–æ–π–ú–∞—Å—Ç–µ—Ä".',
        workPhone: '+74954444444',
        website: 'https://stroymaster.ru',
        workInstagram: '@stroymaster_official',
        workTelegram: '@stroymaster_channel',
        workSchedule: '–ü–Ω-–ü—Ç: 8:00-18:00, –°–±: 9:00-15:00',
        addresses:
          '–ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –¥. 55; –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –†–∞–±–æ—á–∞—è, –¥. 12',
      },
      businessContext: {
        industry: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
        businessStage: 'maturity',
        foundedYear: 2009,
        location: '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–æ—Å—Å–∏—è',
        mainProducts:
          '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤, —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
        targetAudience: '–ß–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞, –º–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å',
        businessModel: 'B2C + B2B —É—Å–ª—É–≥–∏',
        marketSize: '12000000000',
        competitorCount: 500,
        dataRelevanceDate: new Date('2024-08-01'),
      },
    },
    {
      phone: '+79165555555',
      password: '$2b$10$08Rn0fDITvJq.1DKQpx12.g1mNPBUOFVNH2AQ4l1xVdkD3z0SsR9y',
      name: '–û–ª—å–≥–∞',
      surname: '–ú–æ—Ä–æ–∑–æ–≤–∞',
      patronymic: '–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞',
      birthDate: new Date('1992-12-03'),
      personalTelegram: '@olga_morozova',
      personalInstagram: '@olga.organizer',
      personalPhone: '+79165555555',
      yearsInBusiness: 3,
      hobbies: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–∏–∑–∞–π–Ω, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
      role: Role.ADMIN,
      profile: {
        userName: '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
        userAge: 32,
        businessName: 'Event Pro',
        businessDescription:
          '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Å–≤–∞–¥—å–±—ã, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.',
        currentRevenue: '800000',
        targetRevenue: '1200000',
        currentEmployees: 5,
        targetEmployees: 8,
        bio: 'Event-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ "Event Pro".',
        workPhone: '+74955555555',
        website: 'https://eventpro.ru',
        workInstagram: '@eventpro_official',
        workTelegram: '@eventpro_agency',
        workSchedule: '–ü–Ω-–ü—Ç: 10:00-19:00, –°–±-–í—Å: –ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
        addresses: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è, –¥. 8, –æ—Ñ–∏—Å 15',
      },
      businessContext: {
        industry: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
        businessStage: 'startup',
        foundedYear: 2021,
        location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
        mainProducts:
          '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–≤–∞–¥–µ–±, —á–∞—Å—Ç–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤',
        targetAudience: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, —á–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º',
        businessModel: 'B2B + B2C —É—Å–ª—É–≥–∏',
        marketSize: '2000000000',
        competitorCount: 100,
        dataRelevanceDate: new Date('2024-08-01'),
      },
    },
  ];

  // –°–æ–∑–¥–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const userData of testUsers) {
    const existingUser = await prisma.user.findUnique({
      where: { phone: userData.phone },
    });

    if (!existingUser) {
      const { profile, businessContext, ...userCreateData } = userData;

      const newUser = await prisma.user.create({
        data: userCreateData,
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.userProfile.create({
        data: {
          userId: newUser.id,
          ...profile,
        },
      });

      // –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç
      await prisma.businessContext.create({
        data: {
          userId: newUser.id,
          ...businessContext,
        },
      });

      console.log(
        `‚úÖ Created user '${newUser.name} ${newUser.surname}' (${newUser.role})`,
      );
    } else {
      console.log(
        `‚ÑπÔ∏è User '${userData.name} ${userData.surname}' already exists`,
      );
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  console.log('üå± Creating main test user...');

  const existingUser = await prisma.user.findUnique({
    where: { phone: '+79161234567' },
  });

  if (!existingUser) {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        phone: '+79161234567',
        password:
          '$2b$10$08Rn0fDITvJq.1DKQpx12.g1mNPBUOFVNH2AQ4l1xVdkD3z0SsR9y', // password: 'test123'
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        surname: '–ü–µ—Ç—Ä–æ–≤',
        patronymic: '–ò–≤–∞–Ω–æ–≤–∏—á',
        birthDate: new Date('1985-03-15'),
        personalTelegram: '@alex_petrov',
        personalInstagram: '@alex.petrov.business',
        personalPhone: '+79161234567',
        yearsInBusiness: 8,
        hobbies: '–¢–µ–Ω–Ω–∏—Å, —á—Ç–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
        role: Role.USER,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.userProfile.create({
      data: {
        userId: testUser.id,
        userName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
        userAge: 39,
        businessName: '–¢–µ—Ö–Ω–æ–°—Ç–∞—Ä—Ç',
        businessDescription:
          '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ IT-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.',
        currentRevenue: '2500000',
        targetRevenue: '5000000',
        currentEmployees: 12,
        targetEmployees: 25,
        bio: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ IT-—Å—Ñ–µ—Ä–µ. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏ CEO –∫–æ–º–ø–∞–Ω–∏–∏ –¢–µ—Ö–Ω–æ–°—Ç–∞—Ä—Ç. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.',
        workPhone: '+74951234567',
        website: 'https://technostart.ru',
        workInstagram: '@technostart_official',
        workTelegram: '@technostart_channel',
        workSchedule: '–ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-15:00',
        addresses:
          '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15, –æ—Ñ–∏—Å 301; –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä., –¥. 28, –æ—Ñ–∏—Å 205',
      },
    });

    // –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    await prisma.businessContext.create({
      data: {
        userId: testUser.id,
        industry: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        businessStage: 'growth',
        foundedYear: 2016,
        location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
        mainProducts:
          'CRM-—Å–∏—Å—Ç–µ–º—ã, –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏',
        targetAudience:
          '–ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å, —Å—Ç–∞—Ä—Ç–∞–ø—ã, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏',
        businessModel: 'B2B SaaS + —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –∑–∞–∫–∞–∑',
        marketSize: '15000000000',
        competitorCount: 150,
        dataRelevanceDate: new Date('2024-08-01'),
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    const definitions = await prisma.metricDefinition.findMany();

    // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    const metricValues: {
      userId: number;
      metricDefinitionId: number;
      value: number;
      targetValue: number;
      periodType: MetricPeriodType;
      periodDate: Date;
      notes: string;
    }[] = [];
    const currentDate = new Date('2024-08-01');

    for (const definition of definitions) {
      let value: number, targetValue: number;

      switch (definition.name) {
        case '–í—ã—Ä—É—á–∫–∞':
          value = 2500000;
          targetValue = 3000000;
          break;
        case '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å':
          value = 375000;
          targetValue = 500000;
          break;
        case '–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å':
          value = 1250000;
          targetValue = 1500000;
          break;
        case '–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫':
          value = 450000;
          targetValue = 600000;
          break;
        case '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂':
          value = 15;
          targetValue = 20;
          break;
        case 'EBITDA':
          value = 500000;
          targetValue = 700000;
          break;
        case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤':
          value = 45;
          targetValue = 60;
          break;
        case '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã':
          value = 8;
          targetValue = 12;
          break;
        case '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã':
          value = 3;
          targetValue = 2;
          break;
        case '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫':
          value = 55555;
          targetValue = 50000;
          break;
        case '–ö–æ–Ω–≤–µ—Ä—Å–∏—è':
          value = 12;
          targetValue = 15;
          break;
        case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
          value = 12;
          targetValue = 15;
          break;
        case 'LTV (Lifetime Value)':
          value = 180000;
          targetValue = 200000;
          break;
        case 'CAC (Customer Acquisition Cost)':
          value = 25000;
          targetValue = 20000;
          break;
        case 'Churn Rate':
          value = 8;
          targetValue = 5;
          break;
        case 'NPS (Net Promoter Score)':
          value = 42;
          targetValue = 50;
          break;
        case '–í—ã—Ä—É—á–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞':
          value = 208333;
          targetValue = 250000;
          break;
        case '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞':
          value = 1.2;
          targetValue = 1.5;
          break;
        case '–î–æ–ª—è —Ä—ã–Ω–∫–∞':
          value = 0.8;
          targetValue = 1.2;
          break;
        case '–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏':
          value = 25;
          targetValue = 30;
          break;
        case 'ROI (Return on Investment)':
          value = 18;
          targetValue = 25;
          break;
        default:
          value = 100;
          targetValue = 120;
      }

      metricValues.push({
        userId: testUser.id,
        metricDefinitionId: definition.id,
        value,
        targetValue,
        periodType: MetricPeriodType.MONTHLY,
        periodDate: currentDate,
        notes: `–î–∞–Ω–Ω—ã–µ –∑–∞ –∞–≤–≥—É—Å—Ç 2024 –≥–æ–¥–∞`,
      });
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    await prisma.metricValue.createMany({
      data: metricValues,
    });

    console.log(
      `‚úÖ Created test user '${testUser.name}' with profile, business context and ${metricValues.length} metrics`,
    );
  } else {
    console.log(`‚ÑπÔ∏è Test user already exists`);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
  console.log('üå± Creating teams and projects...');
  
  const users = await prisma.user.findMany();
  
  if (users.length >= 3) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    const teams = [
      {
        name: 'IT Development Team',
        description: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ IT-—Ä–µ—à–µ–Ω–∏–π',
        leaderId: users[0].id,
      },
      {
        name: 'Marketing & Sales',
        description: '–ö–æ–º–∞–Ω–¥–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂',
        leaderId: users[1].id,
      },
      {
        name: 'Operations Team',
        description: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
        leaderId: users[2].id,
      },
    ];

    for (const teamData of teams) {
      const existingTeam = await prisma.team.findFirst({
        where: { name: teamData.name },
      });

      if (!existingTeam) {
        const team = await prisma.team.create({
          data: teamData,
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã
        for (const user of users.slice(0, 3)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ
          const existingActiveMembership = await prisma.userTeam.findFirst({
            where: {
              userId: user.id,
              isActive: true,
            },
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
          const existingTeamMembership = await prisma.userTeam.findFirst({
            where: {
              userId: user.id,
              teamId: team.id,
            },
          });

          if (!existingTeamMembership && !existingActiveMembership) {
            await prisma.userTeam.create({
              data: {
                userId: user.id,
                teamId: team.id,
                joinedAt: new Date(),
              },
            });
          }
        }

        const teamMembersCount = await prisma.userTeam.count({
          where: { teamId: team.id, isActive: true },
        });

        console.log(`‚úÖ Created team '${team.name}' with ${teamMembersCount} members`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏
    const createdTeams = await prisma.team.findMany();
    
    for (let i = 0; i < createdTeams.length && i < users.length; i++) {
      const team = createdTeams[i];
      const user = users[i];
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
      const projectData = {
        name: `–ü—Ä–æ–µ–∫—Ç ${team.name}`,
        description: `–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã ${team.name}`,
        createdById: user.id,
        teamId: team.id,
      };

      const existingProject = await prisma.task.findFirst({
        where: { 
          title: projectData.name,
          type: TaskType.TEAM
        },
      });

      if (!existingProject) {
        const project = await prisma.task.create({
          data: {
            title: projectData.name,
            description: projectData.description,
            type: TaskType.TEAM,
            status: TaskStatus.IN_PROGRESS,
            priority: TaskPriority.HIGH,
            creatorId: user.id,
            assigneeId: user.id,
            teamId: team.id,
            startDate: new Date(),
            dueDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // +90 –¥–Ω–µ–π
          },
        });

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        const tasks = [
          {
            title: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
            description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É',
            type: TaskType.TEAM,
            status: TaskStatus.DONE,
            priority: TaskPriority.HIGH,
            parentTaskId: project.id,
          },
          {
            title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã',
            description: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è',
            type: TaskType.TEAM,
            status: TaskStatus.IN_PROGRESS,
            priority: TaskPriority.HIGH,
            parentTaskId: project.id,
          },
          {
            title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP',
            description: '–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
            type: TaskType.TEAM,
            status: TaskStatus.PENDING,
            priority: TaskPriority.MEDIUM,
            parentTaskId: project.id,
          },
          {
            title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            type: TaskType.TEAM,
            status: TaskStatus.TODO,
            priority: TaskPriority.MEDIUM,
            parentTaskId: project.id,
          },
          {
            title: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
            description: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
            type: TaskType.TEAM,
            status: TaskStatus.TODO,
            priority: TaskPriority.LOW,
            parentTaskId: project.id,
          },
        ];

        for (const taskData of tasks) {
          const assignedUser = users[Math.floor(Math.random() * Math.min(3, users.length))];
          
          const task = await prisma.task.create({
            data: {
              ...taskData,
              creatorId: user.id,
              assigneeId: assignedUser.id,
              teamId: team.id,
              startDate: new Date(),
              dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 –¥–Ω–µ–π
            },
          });

          // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏
          await prisma.taskActivity.create({
            data: {
              taskId: task.id,
              userId: user.id,
              action: 'CREATED',
              description: `–ó–∞–¥–∞—á–∞ "${task.title}" –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞`,
            },
          });

          if (task.status === TaskStatus.DONE) {
            await prisma.taskActivity.create({
              data: {
                taskId: task.id,
                userId: assignedUser.id,
                action: 'STATUS_CHANGED',
                description: `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"`,
                oldValue: 'PENDING',
                newValue: 'DONE',
              },
            });
          }
        }

        console.log(`‚úÖ Created project '${project.title}' with ${tasks.length} tasks`);
      }
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üå± Creating metrics for all users...');
  
  const definitions = await prisma.metricDefinition.findMany();
  const allUsers = await prisma.user.findMany();
  
  for (const user of allUsers) {
    const existingMetrics = await prisma.metricValue.count({
      where: { userId: user.id },
    });
    
    if (existingMetrics === 0) {
      const userProfile = await prisma.userProfile.findUnique({
        where: { userId: user.id },
      });
      
      if (userProfile) {
        const currentRevenue = parseInt(userProfile.currentRevenue?.toString() || '1000000');
        const targetRevenue = parseInt(userProfile.targetRevenue?.toString() || '1500000');
        
        const metricValues = definitions.map(definition => {
          let value: number, targetValue: number;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const revenueRatio = currentRevenue / 2500000; // –±–∞–∑–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞
          
          switch (definition.name) {
            case '–í—ã—Ä—É—á–∫–∞':
              value = currentRevenue;
              targetValue = targetRevenue;
              break;
            case '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å':
              value = Math.round(currentRevenue * 0.15 * revenueRatio);
              targetValue = Math.round(targetRevenue * 0.18);
              break;
            case '–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å':
              value = Math.round(currentRevenue * 0.5 * revenueRatio);
              targetValue = Math.round(targetRevenue * 0.55);
              break;
            case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤':
              value = Math.round(45 * revenueRatio);
              targetValue = Math.round(60 * (targetRevenue / currentRevenue));
              break;
            case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
              value = parseInt(userProfile.currentEmployees?.toString() || '10');
              targetValue = parseInt(userProfile.targetEmployees?.toString() || '15');
              break;
            case '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂':
              value = Math.round(15 + Math.random() * 10);
              targetValue = Math.round(20 + Math.random() * 10);
              break;
            case '–ö–æ–Ω–≤–µ—Ä—Å–∏—è':
              value = Math.round(8 + Math.random() * 8);
              targetValue = Math.round(12 + Math.random() * 8);
              break;
            default:
              value = Math.round(100 * revenueRatio + Math.random() * 50);
              targetValue = Math.round(value * 1.2 + Math.random() * 30);
          }
          
          return {
            userId: user.id,
            metricDefinitionId: definition.id,
            value,
            targetValue,
            periodType: 'MONTHLY' as MetricPeriodType,
            periodDate: new Date('2024-08-01'),
            notes: `–î–∞–Ω–Ω—ã–µ –∑–∞ –∞–≤–≥—É—Å—Ç 2024 –≥–æ–¥–∞ –¥–ª—è ${user.name} ${user.surname}`,
          };
        });
        
        await prisma.metricValue.createMany({
          data: metricValues,
        });
        
        console.log(`‚úÖ Created ${metricValues.length} metrics for ${user.name} ${user.surname}`);
      }
    }
  }
}

void main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e);
    process.exit(1);
  })
  .finally(() => {
    void prisma.$disconnect();
  });
